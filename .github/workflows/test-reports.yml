name: Test Reports & Excel Generation

on:
  workflow_run:
    workflows: ["Unit Tests"]
    types: [completed]
    branches: [ main, develop ]

jobs:
  generate-reports:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: read
      pull-requests: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download test artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-results
        path: ./TestResults/
        
    - name: Download coverage artifacts
      uses: actions/download-artifact@v4
      with:
        name: coverage-report
        path: ./coveragereport/
        
    - name: Setup Python for Excel generation
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies
      run: |
        pip install pandas openpyxl xlsxwriter lxml beautifulsoup4
        
    - name: Create Excel coverage report
      run: |
        cat > generate_excel_report.py << 'EOF'
        import pandas as pd
        import json
        import xml.etree.ElementTree as ET
        from datetime import datetime
        import os
        import glob
        from bs4 import BeautifulSoup
        
        def parse_cobertura_xml():
            """Parse Cobertura XML để lấy thông tin chi tiết"""
            xml_files = glob.glob('./TestResults/**/coverage.cobertura.xml', recursive=True)
            if not xml_files:
                return None
                
            tree = ET.parse(xml_files[0])
            root = tree.getroot()
            
            # Thông tin tổng quan
            line_rate = float(root.get('line-rate', 0)) * 100
            branch_rate = float(root.get('branch-rate', 0)) * 100
            
            # Chi tiết theo class/file
            classes_data = []
            packages = root.findall('.//package')
            
            for package in packages:
                package_name = package.get('name', 'Unknown')
                classes = package.findall('.//class')
                
                for cls in classes:
                    class_name = cls.get('name', 'Unknown')
                    filename = cls.get('filename', 'Unknown')
                    class_line_rate = float(cls.get('line-rate', 0)) * 100
                    class_branch_rate = float(cls.get('branch-rate', 0)) * 100
                    
                    # Đếm số dòng
                    lines = cls.findall('.//line')
                    total_lines = len(lines)
                    covered_lines = len([l for l in lines if l.get('hits', '0') != '0'])
                    
                    classes_data.append({
                        'Package': package_name,
                        'Class': class_name,
                        'File': filename,
                        'Line Coverage (%)': round(class_line_rate, 2),
                        'Branch Coverage (%)': round(class_branch_rate, 2),
                        'Total Lines': total_lines,
                        'Covered Lines': covered_lines,
                        'Uncovered Lines': total_lines - covered_lines
                    })
            
            return {
                'summary': {
                    'line_coverage': round(line_rate, 2),
                    'branch_coverage': round(branch_rate, 2)
                },
                'classes': classes_data
            }
        
        def parse_test_results():
            """Parse test results từ TRX files"""
            trx_files = glob.glob('./TestResults/**/test-results.trx', recursive=True)
            test_data = []
            
            if trx_files:
                try:
                    with open(trx_files[0], 'r', encoding='utf-8') as f:
                        content = f.read()
                        soup = BeautifulSoup(content, 'xml')
                        
                    # Parse test results
                    test_results = soup.find_all('UnitTestResult')
                    for result in test_results:
                        test_name = result.get('testName', 'Unknown')
                        outcome = result.get('outcome', 'Unknown')
                        duration = result.get('duration', '00:00:00')
                        
                        error_info = result.find('ErrorInfo')
                        error_message = ""
                        if error_info:
                            message_elem = error_info.find('Message')
                            if message_elem:
                                error_message = message_elem.get_text()
                        
                        test_data.append({
                            'Test Name': test_name,
                            'Result': outcome,
                            'Duration': duration,
                            'Error Message': error_message
                        })
                except Exception as e:
                    print(f"Error parsing TRX file: {e}")
            
            return test_data
        
        def create_excel_report():
            """Tạo báo cáo Excel với nhiều sheet"""
            
            # Parse data
            coverage_data = parse_cobertura_xml()
            test_data = parse_test_results()
            
            # Tạo Excel writer
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            excel_file = f'./coveragereport/Coverage_Report_{timestamp}.xlsx'
            
            with pd.ExcelWriter(excel_file, engine='xlsxwriter') as writer:
                workbook = writer.book
                
                # Định nghĩa formats
                header_format = workbook.add_format({
                    'bold': True,
                    'text_wrap': True,
                    'valign': 'top',
                    'fg_color': '#4472C4',
                    'font_color': 'white',
                    'border': 1
                })
                
                cell_format = workbook.add_format({
                    'text_wrap': True,
                    'valign': 'top',
                    'border': 1
                })
                
                percent_format = workbook.add_format({
                    'num_format': '0.00%',
                    'text_wrap': True,
                    'valign': 'top',
                    'border': 1
                })
                
                # Sheet 1: Summary
                summary_data = []
                if coverage_data:
                    summary_data = [
                        ['Metric', 'Value', 'Status'],
                        ['Line Coverage', f"{coverage_data['summary']['line_coverage']}%", 
                         '✅ Pass' if coverage_data['summary']['line_coverage'] >= 70 else '❌ Fail'],
                        ['Branch Coverage', f"{coverage_data['summary']['branch_coverage']}%", ''],
                        ['Test Run Date', datetime.now().strftime("%Y-%m-%d %H:%M:%S"), ''],
                        ['Total Test Classes', len(coverage_data['classes']) if coverage_data['classes'] else 0, ''],
                        ['Minimum Threshold', '70%', ''],
                    ]
                else:
                    summary_data = [
                        ['Metric', 'Value', 'Status'],
                        ['Line Coverage', 'N/A', 'No data available'],
                    ]
                
                df_summary = pd.DataFrame(summary_data[1:], columns=summary_data[0])
                df_summary.to_excel(writer, sheet_name='Summary', index=False)
                
                worksheet_summary = writer.sheets['Summary']
                worksheet_summary.set_column('A:A', 20)
                worksheet_summary.set_column('B:B', 15)
                worksheet_summary.set_column('C:C', 15)
                
                # Apply formats to summary
                for row_num in range(len(df_summary) + 1):
                    for col_num in range(len(df_summary.columns)):
                        if row_num == 0:
                            worksheet_summary.write(row_num, col_num, df_summary.columns[col_num], header_format)
                        else:
                            worksheet_summary.write(row_num, col_num, df_summary.iloc[row_num-1, col_num], cell_format)
                
                # Sheet 2: Detailed Coverage by Class
                if coverage_data and coverage_data['classes']:
                    df_classes = pd.DataFrame(coverage_data['classes'])
                    df_classes.to_excel(writer, sheet_name='Coverage Details', index=False)
                    
                    worksheet_details = writer.sheets['Coverage Details']
                    worksheet_details.set_column('A:A', 25)  # Package
                    worksheet_details.set_column('B:B', 30)  # Class
                    worksheet_details.set_column('C:C', 40)  # File
                    worksheet_details.set_column('D:D', 18)  # Line Coverage
                    worksheet_details.set_column('E:E', 18)  # Branch Coverage
                    worksheet_details.set_column('F:F', 12)  # Total Lines
                    worksheet_details.set_column('G:G', 15)  # Covered Lines
                    worksheet_details.set_column('H:H', 15)  # Uncovered Lines
                    
                    # Apply formats
                    for row_num in range(len(df_classes) + 1):
                        for col_num in range(len(df_classes.columns)):
                            if row_num == 0:
                                worksheet_details.write(row_num, col_num, df_classes.columns[col_num], header_format)
                            else:
                                worksheet_details.write(row_num, col_num, df_classes.iloc[row_num-1, col_num], cell_format)
                
                # Sheet 3: Test Results
                if test_data:
                    df_tests = pd.DataFrame(test_data)
                    df_tests.to_excel(writer, sheet_name='Test Results', index=False)
                    
                    worksheet_tests = writer.sheets['Test Results']
                    worksheet_tests.set_column('A:A', 50)  # Test Name
                    worksheet_tests.set_column('B:B', 12)  # Result
                    worksheet_tests.set_column('C:C', 12)  # Duration
                    worksheet_tests.set_column('D:D', 60)  # Error Message
                    
                    # Apply formats
                    for row_num in range(len(df_tests) + 1):
                        for col_num in range(len(df_tests.columns)):
                            if row_num == 0:
                                worksheet_tests.write(row_num, col_num, df_tests.columns[col_num], header_format)
                            else:
                                cell_value = df_tests.iloc[row_num-1, col_num]
                                # Highlight failed tests
                                if col_num == 1 and cell_value == 'Failed':
                                    fail_format = workbook.add_format({
                                        'text_wrap': True,
                                        'valign': 'top',
                                        'border': 1,
                                        'bg_color': '#FFE6E6'
                                    })
                                    worksheet_tests.write(row_num, col_num, cell_value, fail_format)
                                else:
                                    worksheet_tests.write(row_num, col_num, cell_value, cell_format)
                
                # Sheet 4: Coverage Trends (placeholder for future use)
                trends_data = [
                    ['Date', 'Line Coverage (%)', 'Branch Coverage (%)', 'Total Tests'],
                    [datetime.now().strftime("%Y-%m-%d"), 
                     coverage_data['summary']['line_coverage'] if coverage_data else 0,
                     coverage_data['summary']['branch_coverage'] if coverage_data else 0,
                     len(test_data) if test_data else 0]
                ]
                
                df_trends = pd.DataFrame(trends_data[1:], columns=trends_data[0])
                df_trends.to_excel(writer, sheet_name='Coverage Trends', index=False)
                
                worksheet_trends = writer.sheets['Coverage Trends']
                worksheet_trends.set_column('A:A', 15)
                worksheet_trends.set_column('B:B', 18)
                worksheet_trends.set_column('C:C', 18)
                worksheet_trends.set_column('D:D', 15)
                
                # Apply formats
                for row_num in range(len(df_trends) + 1):
                    for col_num in range(len(df_trends.columns)):
                        if row_num == 0:
                            worksheet_trends.write(row_num, col_num, df_trends.columns[col_num], header_format)
                        else:
                            worksheet_trends.write(row_num, col_num, df_trends.iloc[row_num-1, col_num], cell_format)
            
            print(f"✅ Excel report generated: {excel_file}")
            return excel_file
        
        # Main execution
        if __name__ == "__main__":
            excel_file = create_excel_report()
            
            # Also create a simple CSV for GitHub display
            if os.path.exists('./coveragereport/Summary.json'):
                try:
                    with open('./coveragereport/Summary.json', 'r') as f:
                        summary = json.load(f)
                    
                    # Create summary CSV
                    summary_csv = pd.DataFrame([
                        ['Line Coverage', summary.get('summary', {}).get('linecoverage', 'N/A')],
                        ['Branch Coverage', summary.get('summary', {}).get('branchcoverage', 'N/A')],
                        ['Generated', datetime.now().strftime("%Y-%m-%d %H:%M:%S")]
                    ], columns=['Metric', 'Value'])
                    
                    summary_csv.to_csv('./coveragereport/coverage_summary.csv', index=False)
                    print("✅ CSV summary created")
                except Exception as e:
                    print(f"❌ Error creating CSV: {e}")
        EOF
        
        python generate_excel_report.py
      
    - name: Extract coverage for summary
      run: |
        # Method 1: Try từ Summary.txt (dễ parse hơn)
        if [ -f "./coveragereport/Summary.txt" ]; then
          echo "📄 Using Summary.txt method"
          COVERAGE=$(grep -o 'Line coverage: [0-9]*\.*[0-9]*%' ./coveragereport/Summary.txt | grep -o '[0-9]*\.*[0-9]*' | head -1)
        fi
        
        # Method 2: Try từ JSON nếu method 1 fail
        if [ -z "$COVERAGE" ] && [ -f "./coveragereport/Summary.json" ]; then
          echo "📊 Using Summary.json method"
          if command -v jq &> /dev/null; then
            COVERAGE=$(cat ./coveragereport/Summary.json | jq -r '.summary.linecoverage' 2>/dev/null || echo "")
          else
            COVERAGE=$(cat ./coveragereport/Summary.json | sed -n 's/.*"linecoverage"[[:space:]]*:[[:space:]]*"\([0-9]*\.*[0-9]*\)".*/\1/p' | head -1)
          fi
        fi
        
        # Method 3: Default value nếu không parse được
        if [ -z "$COVERAGE" ]; then
          echo "⚠️ Cannot parse coverage, using default"
          COVERAGE="0"
        fi
        
        echo "📈 Current coverage: $COVERAGE%"
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        
        # Set minimum coverage threshold
        THRESHOLD=70
        echo "🎯 Minimum threshold: $THRESHOLD%"
        
        if [ -n "$COVERAGE" ] && [ "$COVERAGE" != "0" ]; then
          BELOW_THRESHOLD=$(awk "BEGIN {print ($COVERAGE < $THRESHOLD)}")
          if [ "$BELOW_THRESHOLD" = "1" ]; then
            echo "❌ Coverage $COVERAGE% is below threshold $THRESHOLD%"
            echo "::warning::Code coverage $COVERAGE% is below the required threshold of $THRESHOLD%"
          else
            echo "✅ Coverage $COVERAGE% meets threshold $THRESHOLD%"
          fi
        else
          echo "⚠️ Could not determine coverage percentage"
          echo "::warning::Unable to parse coverage data"
        fi
      
    - name: Display detailed report summary
      run: |
        echo "## 📊 Detailed Test Reports Generated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Coverage:** $COVERAGE%" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Display CSV content if available
        if [ -f "./coveragereport/coverage_summary.csv" ]; then
          echo "### 📋 Quick Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          tail -n +2 ./coveragereport/coverage_summary.csv | sed 's/,/ | /g' | sed 's/^/| /' | sed 's/$/ |/' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### 📄 Generated Reports" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Excel Report**: Detailed multi-sheet Excel report with coverage analysis" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 **HTML Report**: Interactive HTML coverage report" >> $GITHUB_STEP_SUMMARY
        echo "- 📋 **CSV Summary**: Quick summary in CSV format" >> $GITHUB_STEP_SUMMARY
        echo "- 📈 **Coverage Badges**: Visual coverage badges" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Download**: All reports available in artifacts below" >> $GITHUB_STEP_SUMMARY
      
    - name: Upload Excel coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: excel-coverage-report
        path: ./coveragereport/Coverage_Report_*.xlsx
        retention-days: 30
        
    - name: Upload detailed coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: detailed-coverage-report
        path: ./coveragereport/**/*
        retention-days: 30 