name: Unit Tests with Excel Report

on:
  push:
    branches: [ main, devphuctrann ]
  pull_request:
    branches: [ main, devphuctrann ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          nuget-${{ runner.os }}-

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        cache: true
        cache-dependency-path: '**/*.csproj'

    - name: Setup Python for Excel generation
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies
      run: |
        pip install pandas openpyxl xlsxwriter lxml beautifulsoup4
        
    - name: Restore dependencies
      run: dotnet restore BlindTreasure.API.sln
      
    - name: Build
      run: dotnet build BlindTreasure.API.sln --no-restore --configuration Release
      
    - name: Restore tools
      run: dotnet tool restore
      
    - name: Run unit tests
      run: |
        dotnet test BlindTreasure.API.sln \
          --no-build \
          --configuration Release \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults/ \
          --logger "trx;LogFileName=test-results.trx"

    - name: Create Excel coverage report
      run: |
        mkdir -p coveragereport
        cat > generate_excel_report.py << 'EOF'
        import pandas as pd
        import json
        import xml.etree.ElementTree as ET
        from datetime import datetime
        import os
        import glob
        from bs4 import BeautifulSoup
        
        def parse_cobertura_xml():
            xml_files = glob.glob('./TestResults/**/coverage.cobertura.xml', recursive=True)
            if not xml_files:
                return None
            tree = ET.parse(xml_files[0])
            root = tree.getroot()
            line_rate = float(root.get('line-rate', 0)) * 100
            branch_rate = float(root.get('branch-rate', 0)) * 100
            classes_data = []
            packages = root.findall('.//package')
            for package in packages:
                package_name = package.get('name', 'Unknown')
                classes = package.findall('.//class')
                for cls in classes:
                    class_name = cls.get('name', 'Unknown')
                    filename = cls.get('filename', 'Unknown')
                    class_line_rate = float(cls.get('line-rate', 0)) * 100
                    class_branch_rate = float(cls.get('branch-rate', 0)) * 100
                    lines = cls.findall('.//line')
                    total_lines = len(lines)
                    covered_lines = len([l for l in lines if l.get('hits', '0') != '0'])
                    classes_data.append({
                        'Package': package_name,
                        'Class': class_name,
                        'File': filename,
                        'Line Coverage (%)': round(class_line_rate, 2),
                        'Branch Coverage (%)': round(class_branch_rate, 2),
                        'Total Lines': total_lines,
                        'Covered Lines': covered_lines,
                        'Uncovered Lines': total_lines - covered_lines
                    })
            return {
                'summary': {
                    'line_coverage': round(line_rate, 2),
                    'branch_coverage': round(branch_rate, 2)
                },
                'classes': classes_data
            }
        
        def parse_test_results():
            trx_files = glob.glob('./TestResults/**/test-results.trx', recursive=True)
            test_data = []
            if trx_files:
                try:
                    with open(trx_files[0], 'r', encoding='utf-8') as f:
                        content = f.read()
                        soup = BeautifulSoup(content, 'xml')
                    test_results = soup.find_all('UnitTestResult')
                    for result in test_results:
                        test_name = result.get('testName', 'Unknown')
                        outcome = result.get('outcome', 'Unknown')
                        duration = result.get('duration', '00:00:00')
                        error_info = result.find('ErrorInfo')
                        error_message = ""
                        if error_info:
                            message_elem = error_info.find('Message')
                            if message_elem:
                                error_message = message_elem.get_text()
                        test_data.append({
                            'Test Name': test_name,
                            'Result': outcome,
                            'Duration': duration,
                            'Error Message': error_message
                        })
                except Exception as e:
                    print(f"Error parsing TRX file: {e}")
            return test_data
        
        def create_excel_report():
            coverage_data = parse_cobertura_xml()
            test_data = parse_test_results()
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            excel_file = f'./coveragereport/Coverage_Report_{timestamp}.xlsx'
            with pd.ExcelWriter(excel_file, engine='xlsxwriter') as writer:
                workbook = writer.book
                header_format = workbook.add_format({
                    'bold': True,
                    'text_wrap': True,
                    'valign': 'top',
                    'fg_color': '#4472C4',
                    'font_color': 'white',
                    'border': 1
                })
                cell_format = workbook.add_format({
                    'text_wrap': True,
                    'valign': 'top',
                    'border': 1
                })
                summary_data = []
                if coverage_data:
                    summary_data = [
                        ['Metric', 'Value', 'Status'],
                        ['Line Coverage', f"{coverage_data['summary']['line_coverage']}%", 
                         '✅ Pass' if coverage_data['summary']['line_coverage'] >= 70 else '❌ Fail'],
                        ['Branch Coverage', f"{coverage_data['summary']['branch_coverage']}%", ''],
                        ['Test Run Date', datetime.now().strftime("%Y-%m-%d %H:%M:%S"), ''],
                        ['Total Test Classes', len(coverage_data['classes']) if coverage_data['classes'] else 0, ''],
                        ['Minimum Threshold', '70%', ''],
                    ]
                else:
                    summary_data = [
                        ['Metric', 'Value', 'Status'],
                        ['Line Coverage', 'N/A', 'No data available'],
                    ]
                df_summary = pd.DataFrame(summary_data[1:], columns=summary_data[0])
                df_summary.to_excel(writer, sheet_name='Summary', index=False)
                worksheet_summary = writer.sheets['Summary']
                worksheet_summary.set_column('A:A', 20)
                worksheet_summary.set_column('B:B', 15)
                worksheet_summary.set_column('C:C', 15)
                for row_num in range(len(df_summary) + 1):
                    for col_num in range(len(df_summary.columns)):
                        if row_num == 0:
                            worksheet_summary.write(row_num, col_num, df_summary.columns[col_num], header_format)
                        else:
                            worksheet_summary.write(row_num, col_num, df_summary.iloc[row_num-1, col_num], cell_format)
                if coverage_data and coverage_data['classes']:
                    df_classes = pd.DataFrame(coverage_data['classes'])
                    df_classes.to_excel(writer, sheet_name='Coverage Details', index=False)
                    worksheet_details = writer.sheets['Coverage Details']
                    worksheet_details.set_column('A:A', 25)
                    worksheet_details.set_column('B:B', 30)
                    worksheet_details.set_column('C:C', 40)
                    worksheet_details.set_column('D:D', 18)
                    worksheet_details.set_column('E:E', 18)
                    worksheet_details.set_column('F:F', 12)
                    worksheet_details.set_column('G:G', 15)
                    worksheet_details.set_column('H:H', 15)
                    for row_num in range(len(df_classes) + 1):
                        for col_num in range(len(df_classes.columns)):
                            if row_num == 0:
                                worksheet_details.write(row_num, col_num, df_classes.columns[col_num], header_format)
                            else:
                                worksheet_details.write(row_num, col_num, df_classes.iloc[row_num-1, col_num], cell_format)
                if test_data:
                    df_tests = pd.DataFrame(test_data)
                    df_tests.to_excel(writer, sheet_name='Test Results', index=False)
                    worksheet_tests = writer.sheets['Test Results']
                    worksheet_tests.set_column('A:A', 50)
                    worksheet_tests.set_column('B:B', 12)
                    worksheet_tests.set_column('C:C', 12)
                    worksheet_tests.set_column('D:D', 60)
                    for row_num in range(len(df_tests) + 1):
                        for col_num in range(len(df_tests.columns)):
                            if row_num == 0:
                                worksheet_tests.write(row_num, col_num, df_tests.columns[col_num], header_format)
                            else:
                                cell_value = df_tests.iloc[row_num-1, col_num]
                                if col_num == 1 and cell_value == 'Failed':
                                    fail_format = workbook.add_format({
                                        'text_wrap': True,
                                        'valign': 'top',
                                        'border': 1,
                                        'bg_color': '#FFE6E6'
                                    })
                                    worksheet_tests.write(row_num, col_num, cell_value, fail_format)
                                else:
                                    worksheet_tests.write(row_num, col_num, cell_value, cell_format)
            print(f"✅ Excel report generated: {excel_file}")
            return excel_file
        if __name__ == "__main__":
            excel_file = create_excel_report()
        EOF
        python generate_excel_report.py

    - name: Display coverage summary
      run: |
        echo "## 📊 Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Excel Report Available**: Download the detailed Excel report from artifacts below" >> $GITHUB_STEP_SUMMARY

    - name: Upload Excel coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: excel-coverage-report
        path: ./coveragereport/Coverage_Report_*.xlsx
        retention-days: 30