name: Unit Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          nuget-${{ runner.os }}-

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        cache: true
        cache-dependency-path: '**/*.csproj'
        # cache: true sẽ tự động cache nuget nếu dùng setup-dotnet@v4
        
    - name: Restore dependencies
      run: dotnet restore BlindTreasure.API.sln
      
    - name: Build
      run: dotnet build BlindTreasure.API.sln --no-restore --configuration Release
      
    - name: Restore tools
      run: dotnet tool restore
      
    - name: Run unit tests
      run: |
        dotnet test BlindTreasure.API.sln \
          --no-build \
          --configuration Release \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults/ \
          --logger "trx;LogFileName=test-results.trx"
      
    - name: Generate coverage report
      run: |
        ~/.dotnet/tools/reportgenerator \
          -reports:"./TestResults/**/coverage.cobertura.xml" \
          -targetdir:"./coveragereport" \
          -reporttypes:"Html;Badges;TextSummary;JsonSummary"
      
    - name: Display coverage summary
      run: |
        echo "## Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
        cat ./coveragereport/Summary.txt >> $GITHUB_STEP_SUMMARY
      
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        header: coverage-report
        message: |
          ## 📊 Code Coverage Report
          
          ```
          $(cat ./coveragereport/Summary.txt)
          ```
          
          📋 [Detailed HTML Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) available in artifacts.
      
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: ./coveragereport/**/*
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: ./TestResults/**/*
        
    - name: Check coverage threshold
      run: |
        COVERAGE=$(grep -o 'Line coverage: [0-9]*\.*[0-9]*%' ./coveragereport/Summary.txt | grep -o '[0-9]*\.*[0-9]*')
        echo "Current coverage: $COVERAGE%"
        
        # Set minimum coverage threshold (70%)
        THRESHOLD=70
        
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below threshold $THRESHOLD%"
          exit 1
        else
          echo "✅ Coverage $COVERAGE% meets threshold $THRESHOLD%"
        fi