name: Unit Tests with Excel Report (Functions + Statistics)

on:
  push:
    branches: [devphuctrann]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          cache: true
          cache-dependency-path: '**/*.csproj'

      - name: Setup Python for Excel generation
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          pip install pandas openpyxl xlsxwriter lxml beautifulsoup4

      - name: Restore dependencies
        run: dotnet restore BlindTreasure.API.sln

      - name: Build with documentation
        run: |
          dotnet build BlindTreasure.API.sln \
            --no-restore \
            --configuration Release \
            /p:GenerateDocumentationFile=true
          
          # Verify XML docs are generated
          find . -name "*.xml" -path "*/bin/*" | sort

      - name: Run unit tests with coverage
        run: |
          dotnet test BlindTreasure.API.sln \
            --no-build \
            --configuration Release \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults/ \
            --logger "trx;LogFileName=test-results.trx"

      - name: Generate Excel Report (Functions + Statistics)
        run: |
          mkdir -p coveragereport
          cat > generate_excel_report.py << 'EOF'
          import pandas as pd
          import xml.etree.ElementTree as ET
          import glob, os, re
          from bs4 import BeautifulSoup

          def extract_xml_docs():
              """Đọc XML documentation từ csproj build ra"""
              xml_files = glob.glob('./**/bin/**/*.xml', recursive=True)
              docs = []
              for xml_file in xml_files:
                  try:
                      tree = ET.parse(xml_file)
                      root = tree.getroot()
                      for member in root.findall('.//member'):
                          name = member.get('name', '')
                          if name.startswith("M:"):
                              method_parts = name.split('.')
                              class_name = method_parts[-2]
                              method_name = method_parts[-1].split('(')[0]

                              summary = ""
                              remarks = {}
                              sum_elem = member.find('summary')
                              if sum_elem is not None and sum_elem.text:
                                  summary = sum_elem.text.strip()

                              rem_elem = member.find('remarks')
                              if rem_elem is not None and rem_elem.text:
                                  for line in rem_elem.text.splitlines():
                                      line=line.strip()
                                      if line.startswith("Scenario:"):
                                          remarks["Scenario"] = line.replace("Scenario:","").strip()
                                      elif line.startswith("Expected:"):
                                          remarks["Expected"] = line.replace("Expected:","").strip()
                                      elif line.startswith("Coverage:"):
                                          remarks["Coverage"] = line.replace("Coverage:","").strip()

                              docs.append({
                                  "Class": class_name,
                                  "Method": method_name,
                                  "Summary": summary,
                                  "PreCondition": remarks.get("Scenario",""),
                                  "Requirement": remarks.get("Coverage","")
                              })
                  except Exception as e:
                      continue
              return docs

          def parse_test_results():
              """Đọc file TRX để đếm pass/fail theo method"""
              trx_files = glob.glob('./TestResults/**/test-results.trx', recursive=True)
              results = {}
              if trx_files:
                  with open(trx_files[0],'r',encoding='utf-8') as f:
                      soup = BeautifulSoup(f.read(),'xml')
                  for ut in soup.find_all('UnitTestResult'):
                      testname = ut.get("testName","Unknown")
                      outcome = ut.get("outcome","Unknown")
                      method = testname.split('.')[-1]
                      results[method] = outcome
              return results

          def create_excel():
              docs = extract_xml_docs()
              test_results = parse_test_results()

              # Sheet Functions
              funcs = []
              for i, d in enumerate(docs, start=1):
                  sheet_name = f"{d['Class']}Management"
                  funcs.append({
                      "No": i,
                      "RequirementName": d['Requirement'],
                      "Class Name": d['Class'],
                      "Function Name": d['Method'],
                      "Function Code": f"Code_{i}",
                      "Sheet Name": sheet_name,
                      "Description": d['Summary'],
                      "Pre-Condition": d['PreCondition']
                  })
              df_funcs = pd.DataFrame(funcs)

              # Sheet Statistics
              stats = []
              for i, d in enumerate(docs, start=1):
                  sheet_name = f"{d['Class']}Management"
                  method = d['Method']
                  outcome = test_results.get(method,"Untested")
                  passed = 1 if outcome=="Passed" else 0
                  failed = 1 if outcome=="Failed" else 0
                  untested = 1 if outcome not in ["Passed","Failed"] else 0

                  stats.append({
                      "No": i,
                      "Function Code": f'=HYPERLINK("#{sheet_name}!A1","Code")',
                      "Passed": passed,
                      "Failed": failed,
                      "Untested": untested,
                      "N": 0,
                      "A": 0,
                      "B": 0,
                      "Total Test Cases": passed+failed+untested
                  })
              df_stats = pd.DataFrame(stats)

              out_file = "./coveragereport/Functions_Statistics_Report.xlsx"
              with pd.ExcelWriter(out_file, engine="xlsxwriter") as writer:
                  df_funcs.to_excel(writer, sheet_name="Functions", index=False)
                  df_stats.to_excel(writer, sheet_name="Statistics", index=False)

                  workbook = writer.book
                  header_fmt = workbook.add_format({"bold": True,"bg_color":"#4472C4","font_color":"white","border":1})

                  for sheet in ["Functions","Statistics"]:
                      ws = writer.sheets[sheet]
                      for col_num, value in enumerate(df_funcs.columns if sheet=="Functions" else df_stats.columns):
                          ws.write(0,col_num,value,header_fmt)
              print("✅ Excel report generated:", out_file)

          if __name__=="__main__":
              create_excel()
          EOF
          python generate_excel_report.py

      - name: Upload Excel coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: excel-functions-statistics-report
          path: ./coveragereport/Functions_Statistics_Report.xlsx
          retention-days: 30
