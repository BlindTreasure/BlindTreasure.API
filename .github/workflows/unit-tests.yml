name: Unit Tests with Excel Report

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    # ================== SETUP M√îTR∆Ø·ªúNG ==================
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        cache: true
        cache-dependency-path: '**/*.csproj'

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          nuget-${{ runner.os }}-


        
    # ================== BUILD V√Ä CH·∫†Y TEST ==================
    - name: Restore dependencies and build
      run: |
        dotnet restore BlindTreasure.API.sln
        dotnet build BlindTreasure.API.sln --no-restore --configuration Release
      
    - name: Restore tools
      run: dotnet tool restore
      
    - name: Run unit tests
      run: |
        # Ch·∫°y unit tests v√† t·∫°o file coverage + test results
        dotnet test \
          --no-build \
          --configuration Release \
          --verbosity minimal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults/ \
          --logger "trx;LogFileName=test-results.trx" \
          --blame-hang-timeout 2m \
          --blame-crash-timeout 2m
      
    - name: Generate coverage report
      run: |
        # T·∫°o b√°o c√°o coverage t·ª´ file XML th√†nh HTML, JSON, Markdown
        dotnet tool run reportgenerator \
          -reports:"./TestResults/**/coverage.cobertura.xml" \
          -targetdir:"./coveragereport" \
          -reporttypes:"TextSummary;JsonSummary;MarkdownSummaryGithub"
      

      
    # ================== X·ª¨ L√ù V√Ä HI·ªÇN TH·ªä K·∫æT QU·∫¢ ==================
    - name: Extract and check coverage
      run: |
        # Parse coverage percentage t·ª´ nhi·ªÅu ngu·ªìn kh√°c nhau
        # Method 1: T·ª´ Summary.txt
        if [ -f "./coveragereport/Summary.txt" ]; then
          echo "üìÑ Using Summary.txt method"
          COVERAGE=$(grep -o 'Line coverage: [0-9]*\.*[0-9]*%' ./coveragereport/Summary.txt | grep -o '[0-9]*\.*[0-9]*' | head -1)
        fi
        
        # Method 2: T·ª´ JSON n·∫øu method 1 fail  
        if [ -z "$COVERAGE" ] && [ -f "./coveragereport/Summary.json" ]; then
          echo "üìä Using Summary.json method"
          if command -v jq &> /dev/null; then
            COVERAGE=$(cat ./coveragereport/Summary.json | jq -r '.summary.linecoverage' 2>/dev/null || echo "")
          else
            COVERAGE=$(cat ./coveragereport/Summary.json | sed -n 's/.*"linecoverage"[[:space:]]*:[[:space:]]*"\([0-9]*\.*[0-9]*\)".*/\1/p' | head -1)
          fi
        fi
        
        # Method 3: Default value n·∫øu kh√¥ng parse ƒë∆∞·ª£c
        if [ -z "$COVERAGE" ]; then
          echo "‚ö†Ô∏è Cannot parse coverage, using default"
          COVERAGE="0"
        fi
        
        echo "üìà Current coverage: $COVERAGE%"
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        
        # Ki·ªÉm tra threshold
        THRESHOLD=70
        echo "üéØ Minimum threshold: $THRESHOLD%"
        
        if [ -n "$COVERAGE" ] && [ "$COVERAGE" != "0" ]; then
          BELOW_THRESHOLD=$(awk "BEGIN {print ($COVERAGE < $THRESHOLD)}")
          if [ "$BELOW_THRESHOLD" = "1" ]; then
            echo "‚ùå Coverage $COVERAGE% is below threshold $THRESHOLD%"
            echo "::warning::Code coverage $COVERAGE% is below the required threshold of $THRESHOLD%"
          else
            echo "‚úÖ Coverage $COVERAGE% meets threshold $THRESHOLD%"
          fi
        else
          echo "‚ö†Ô∏è Could not determine coverage percentage"
          echo "::warning::Unable to parse coverage data"
        fi
      
    # ================== HI·ªÇN TH·ªä SUMMARY TR√äN GITHUB ==================
    - name: Display coverage summary
      run: |
        # T·∫°o summary hi·ªÉn th·ªã tr√™n GitHub Actions page
        echo "## üìä Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Coverage:** $COVERAGE%" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Hi·ªÉn th·ªã chi ti·∫øt trong code block
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat ./coveragereport/Summary.txt 2>/dev/null || echo "Summary not available" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üìä **Excel Report**: Will be generated by separate workflow after test completion" >> $GITHUB_STEP_SUMMARY
      
    # ================== COMMENT TR√äN PULL REQUEST ==================
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      continue-on-error: true
      with:
        recreate: true
        header: coverage-report
        message: |
          ## üìä Code Coverage Report
          
          **Coverage:** ${{ env.COVERAGE }}%  
          **Threshold:** 70%  
          **Status:** ${{ env.COVERAGE >= 70 && '‚úÖ Passed' || '‚ö†Ô∏è Below threshold' }}
          
          ```
          $(cat ./coveragereport/Summary.txt 2>/dev/null || echo "Summary not available")
          ```
          
          üìä **Excel Report**: Will be generated by separate workflow after test completion
      
    # ================== UPLOAD ARTIFACTS CHO WORKFLOW KH√ÅC ==================
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: ./TestResults/**/*                       # üß™ Upload file test results
        retention-days: 30
        
    - name: Upload coverage reports  
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: ./coveragereport/**/*                    # üìã Upload t·∫•t c·∫£ file coverage
        retention-days: 30
        
    # ================== TRIGGER EXCEL REPORT GENERATION ==================
    - name: Trigger Excel Report Generation
      if: success()  # Ch·ªâ trigger khi tests th√†nh c√¥ng
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.REPO_DISPATCH_TOKEN }}
        repository: ${{ github.repository }}
        event-type: generate-excel-report
        client-payload: '{"workflow_run_id": "${{ github.run_id }}"}'