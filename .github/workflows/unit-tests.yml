name: Unit Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          nuget-${{ runner.os }}-

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        cache: true
        cache-dependency-path: '**/*.csproj'
        
    - name: Restore dependencies
      run: dotnet restore BlindTreasure.API.sln
      
    - name: Build
      run: dotnet build BlindTreasure.API.sln --no-restore --configuration Release
      
    - name: Restore tools
      run: dotnet tool restore
      
    - name: Run unit tests
      run: |
        dotnet test BlindTreasure.API.sln \
          --no-build \
          --configuration Release \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults/ \
          --logger "trx;LogFileName=test-results.trx"
      
    - name: Generate coverage report
      run: |
        dotnet tool run reportgenerator \
          -reports:"./TestResults/**/coverage.cobertura.xml" \
          -targetdir:"./coveragereport" \
          -reporttypes:"Html;Badges;TextSummary;JsonSummary;MarkdownSummaryGithub"
      
    - name: Debug coverage files
      run: |
        echo "=== Files generated ==="
        ls -la ./coveragereport/
        echo ""
        echo "=== Summary.txt content ==="
        cat ./coveragereport/Summary.txt || echo "Summary.txt not found"
        echo ""
        echo "=== Summary.json content (first 500 chars) ==="
        head -c 500 ./coveragereport/Summary.json || echo "Summary.json not found"
        echo ""
      
    - name: Extract and check coverage
      run: |
        # Method 1: Try từ Summary.txt (dễ parse hơn)
        if [ -f "./coveragereport/Summary.txt" ]; then
          echo "📄 Using Summary.txt method"
          COVERAGE=$(grep -o 'Line coverage: [0-9]*\.*[0-9]*%' ./coveragereport/Summary.txt | grep -o '[0-9]*\.*[0-9]*' | head -1)
        fi
        
        # Method 2: Try từ JSON nếu method 1 fail
        if [ -z "$COVERAGE" ] && [ -f "./coveragereport/Summary.json" ]; then
          echo "📊 Using Summary.json method"
          # Thử parse JSON với jq nếu có
          if command -v jq &> /dev/null; then
            COVERAGE=$(cat ./coveragereport/Summary.json | jq -r '.summary.linecoverage' 2>/dev/null || echo "")
          else
            # Fallback parsing không dùng jq
            COVERAGE=$(cat ./coveragereport/Summary.json | sed -n 's/.*"linecoverage"[[:space:]]*:[[:space:]]*"\([0-9]*\.*[0-9]*\)".*/\1/p' | head -1)
          fi
        fi
        
        # Method 3: Default value nếu không parse được
        if [ -z "$COVERAGE" ]; then
          echo "⚠️ Cannot parse coverage, using default"
          COVERAGE="0"
        fi
        
        echo "📈 Current coverage: $COVERAGE%"
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        
        # Set minimum coverage threshold
        THRESHOLD=70
        echo "🎯 Minimum threshold: $THRESHOLD%"
        
        # So sánh coverage (sử dụng awk thay bc để tránh dependency)
        if [ -n "$COVERAGE" ] && [ "$COVERAGE" != "0" ]; then
          BELOW_THRESHOLD=$(awk "BEGIN {print ($COVERAGE < $THRESHOLD)}")
          if [ "$BELOW_THRESHOLD" = "1" ]; then
            echo "❌ Coverage $COVERAGE% is below threshold $THRESHOLD%"
            echo "::warning::Code coverage $COVERAGE% is below the required threshold of $THRESHOLD%"
            # Không exit 1 để không fail workflow, chỉ warning
          else
            echo "✅ Coverage $COVERAGE% meets threshold $THRESHOLD%"
          fi
        else
          echo "⚠️ Could not determine coverage percentage"
          echo "::warning::Unable to parse coverage data"
        fi
      
    - name: Display coverage summary
      run: |
        echo "## 📊 Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Coverage:** $COVERAGE%" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat ./coveragereport/Summary.txt 2>/dev/null || echo "Summary not available" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📋 [Download detailed HTML report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
      
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      continue-on-error: true
      with:
        recreate: true
        header: coverage-report
        message: |
          ## 📊 Code Coverage Report
          
          **Coverage:** ${{ env.COVERAGE }}%  
          **Threshold:** 70%  
          **Status:** ${{ env.COVERAGE >= 70 && '✅ Passed' || '⚠️ Below threshold' }}
          
          ```
          $(cat ./coveragereport/Summary.txt 2>/dev/null || echo "Summary not available")
          ```
          
          📋 [Detailed HTML Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) available in artifacts.
      
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: ./coveragereport/**/*
        retention-days: 30
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: ./TestResults/**/*
        retention-days: 30