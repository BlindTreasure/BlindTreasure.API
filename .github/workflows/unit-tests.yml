name: Unit Tests with Excel Report

on:
  push:
    branches: [ main, devphuctrann ]
  pull_request:
    branches: [ main, devphuctrann ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          nuget-${{ runner.os }}-

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        cache: true
        cache-dependency-path: '**/*.csproj'

    - name: Setup Python for Excel generation
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies
      run: |
        pip install pandas openpyxl xlsxwriter lxml beautifulsoup4
        
    - name: Restore dependencies
      run: dotnet restore BlindTreasure.API.sln
      
    - name: Build
      run: dotnet build BlindTreasure.API.sln --no-restore --configuration Release
      
    - name: Restore tools
      run: dotnet tool restore
      
    - name: Run unit tests
      run: |
        dotnet test BlindTreasure.API.sln \
          --no-build \
          --configuration Release \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults/ \
          --logger "trx;LogFileName=test-results.trx"

    - name: Create Excel coverage report
      run: |
        mkdir -p coveragereport
        cat > generate_excel_report.py << 'EOF'
        import pandas as pd
        import glob
        from datetime import datetime
        from bs4 import BeautifulSoup
        
        def parse_test_results():
            trx_files = glob.glob('./TestResults/**/test-results.trx', recursive=True)
            test_data = []
            if trx_files:
                try:
                    with open(trx_files[0], 'r', encoding='utf-8') as f:
                        content = f.read()
                        soup = BeautifulSoup(content, 'xml')
                    test_results = soup.find_all('UnitTestResult')
                    for result in test_results:
                        test_name = result.get('testName', 'Unknown')
                        outcome = result.get('outcome', 'Unknown')
                        duration = result.get('duration', '00:00:00')
                        error_info = result.find('ErrorInfo')
                        error_message = ""
                        if error_info:
                            message_elem = error_info.find('Message')
                            if message_elem:
                                error_message = message_elem.get_text()
                        test_data.append({
                            'Test ID': f"TC-{len(test_data) + 1:03d}",
                            'Test Name': test_name,
                            'Description': f"Verify {test_name.replace('_', ' ')}",
                            'Status': 'Passed' if outcome == 'Passed' else 'Failed',
                            'Duration (ms)': duration,
                            'Error Message': error_message
                        })
                except Exception as e:
                    print(f"Error parsing TRX file: {e}")
            return test_data
        
        def create_statistics(test_data):
            if not test_data:
                return pd.DataFrame()
            
            total_tests = len(test_data)
            passed_tests = sum(1 for test in test_data if test['Status'] == 'Passed')
            failed_tests = total_tests - passed_tests
            pass_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
            
            stats_data = [
                {'Metric': 'Total Test Cases', 'Value': total_tests},
                {'Metric': 'Passed', 'Value': passed_tests},
                {'Metric': 'Failed', 'Value': failed_tests},
                {'Metric': 'Pass Rate (%)', 'Value': f"{pass_rate:.2f}%"},
                {'Metric': 'Test Run Date', 'Value': datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
            ]
            
            return pd.DataFrame(stats_data)
        
        def create_excel_report():
            test_data = parse_test_results()
            stats_data = create_statistics(test_data)
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            excel_file = f'./coveragereport/Test_Report_{timestamp}.xlsx'
            
            with pd.ExcelWriter(excel_file, engine='xlsxwriter') as writer:
                workbook = writer.book
                
                # Define formats
                header_format = workbook.add_format({
                    'bold': True,
                    'text_wrap': True,
                    'valign': 'top',
                    'fg_color': '#4472C4',
                    'font_color': 'white',
                    'border': 1
                })
                
                cell_format = workbook.add_format({
                    'text_wrap': True,
                    'valign': 'top',
                    'border': 1
                })
                
                pass_format = workbook.add_format({
                    'text_wrap': True,
                    'valign': 'top',
                    'border': 1,
                    'bg_color': '#E2EFDA'  # Light green for passed tests
                })
                
                fail_format = workbook.add_format({
                    'text_wrap': True,
                    'valign': 'top',
                    'border': 1,
                    'bg_color': '#FFE6E6'  # Light red for failed tests
                })
                
                # Create Test Cases sheet
                if test_data:
                    df_tests = pd.DataFrame(test_data)
                    df_tests.to_excel(writer, sheet_name='Test Cases', index=False)
                    worksheet_tests = writer.sheets['Test Cases']
                    
                    # Set column widths
                    worksheet_tests.set_column('A:A', 10)  # Test ID
                    worksheet_tests.set_column('B:B', 40)  # Test Name
                    worksheet_tests.set_column('C:C', 50)  # Description
                    worksheet_tests.set_column('D:D', 12)  # Status
                    worksheet_tests.set_column('E:E', 15)  # Duration
                    worksheet_tests.set_column('F:F', 50)  # Error Message
                    
                    # Apply formatting to cells
                    for row_num in range(len(df_tests) + 1):
                        for col_num in range(len(df_tests.columns)):
                            if row_num == 0:
                                worksheet_tests.write(row_num, col_num, df_tests.columns[col_num], header_format)
                            else:
                                cell_value = df_tests.iloc[row_num-1, col_num]
                                # Apply different formatting based on test status
                                if col_num == 3:  # Status column
                                    if cell_value == 'Passed':
                                        worksheet_tests.write(row_num, col_num, cell_value, pass_format)
                                    else:
                                        worksheet_tests.write(row_num, col_num, cell_value, fail_format)
                                else:
                                    worksheet_tests.write(row_num, col_num, cell_value, cell_format)
                
                # Create Test Statistics sheet
                if not stats_data.empty:
                    stats_data.to_excel(writer, sheet_name='Test Statistic', index=False)
                    worksheet_stats = writer.sheets['Test Statistic']
                    
                    # Set column widths
                    worksheet_stats.set_column('A:A', 25)  # Metric
                    worksheet_stats.set_column('B:B', 25)  # Value
                    
                    # Apply formatting to cells
                    for row_num in range(len(stats_data) + 1):
                        for col_num in range(len(stats_data.columns)):
                            if row_num == 0:
                                worksheet_stats.write(row_num, col_num, stats_data.columns[col_num], header_format)
                            else:
                                worksheet_stats.write(row_num, col_num, stats_data.iloc[row_num-1, col_num], cell_format)
                
            print(f"âœ… Excel test report generated: {excel_file}")
            return excel_file
        
        if __name__ == "__main__":
            excel_file = create_excel_report()
        EOF
        python generate_excel_report.py

    - name: Upload Excel test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-report
        path: ./coveragereport/Test_Report_*.xlsx
        retention-days: 30

    - name: Display coverage summary
      run: |
        echo "## ðŸ“Š Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ðŸ“Š **Excel Report Available**: Download the detailed Excel report from artifacts below" >> $GITHUB_STEP_SUMMARY

    - name: Upload Excel coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: excel-coverage-report
        path: ./coveragereport/Coverage_Report_*.xlsx
        retention-days: 30