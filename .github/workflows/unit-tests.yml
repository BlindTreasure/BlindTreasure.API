name: Unit Tests with Excel Report

on:
  push:
    branches: [ main, devphuctrann ]
  pull_request:
    branches: [ main, devphuctrann ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          nuget-${{ runner.os }}-

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        cache: true
        cache-dependency-path: '**/*.csproj'

    - name: Setup Python for Excel generation
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies
      run: |
        pip install pandas openpyxl xlsxwriter lxml beautifulsoup4
        
    - name: Restore dependencies
      run: dotnet restore BlindTreasure.API.sln
      
    - name: Build
      run: dotnet build BlindTreasure.API.sln --no-restore --configuration Release
      
    - name: Restore tools
      run: dotnet tool restore
      
    - name: Run unit tests
      run: |
        dotnet test BlindTreasure.API.sln \
          --no-build \
          --configuration Release \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults/ \
          --logger "trx;LogFileName=test-results.trx"

    - name: Create Excel coverage report
      run: |
        mkdir -p coveragereport
        cat > generate_excel_report.py << 'EOF'
        import pandas as pd
        import glob
        from datetime import datetime
        from bs4 import BeautifulSoup
        import os
        
        def parse_test_results():
            trx_files = glob.glob('./TestResults/**/test-results.trx', recursive=True)
            test_data = []
            if trx_files:
                try:
                    with open(trx_files[0], 'r', encoding='utf-8') as f:
                        content = f.read()
                        soup = BeautifulSoup(content, 'xml')
                    test_results = soup.find_all('UnitTestResult')
                    for result in test_results:
                        test_name = result.get('testName', 'Unknown')
                        outcome = result.get('outcome', 'Unknown')
                        test_data.append({
                            'test_name': test_name,
                            'outcome': outcome
                        })
                except Exception as e:
                    print(f"Error parsing TRX file: {e}")
            return test_data
        
        def extract_functions(test_data):
            # Extract function names from test names (this is an example, adjust as needed)
            functions = []
            seen = set()
        
            for test in test_data:
                # Extract function name from test name - adjust this logic based on your naming convention
                parts = test['test_name'].split('_')
                if len(parts) > 1:
                    func_name = parts[0]
                else:
                    func_name = test['test_name']
        
                # Capitalize first letter and add spaces between camelCase
                import re
                func_name = re.sub(r'([a-z])([A-Z])', r'\1 \2', func_name)
                func_name = func_name.capitalize()
        
                if func_name not in seen:
                    seen.add(func_name)
                    functions.append(func_name)
        
            # If no functions extracted or too few, use these defaults
            if len(functions) < 8:
                functions = [
                    "Login", 
                    "Create Course", 
                    "Create Publish Class Request", 
                    "Handle Publish Class Request",
                    "Learner Register",
                    "Take Attendance",
                    "Create Payout Request",
                    "Handle Payout Request"
                ]
        
            return functions[:8]  # Limit to 8 functions as in the sample
        
        def create_excel_report():
            test_data = parse_test_results()
            functions = extract_functions(test_data)
        
            today = datetime.now().strftime("%m/%d/%Y")
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            excel_file = f'./coveragereport/Test_Report_{timestamp}.xlsx'
        
            with pd.ExcelWriter(excel_file, engine='xlsxwriter') as writer:
                workbook = writer.book
        
                # Define formats
                title_format = workbook.add_format({
                    'bold': True,
                    'font_size': 16,
                    'align': 'center',
                    'valign': 'vcenter'
                })
        
                header_format_blue = workbook.add_format({
                    'bold': True,
                    'font_color': 'white',
                    'bg_color': '#000080',  # Navy blue
                    'align': 'center',
                    'valign': 'vcenter',
                    'border': 1
                })
        
                header_format_brown = workbook.add_format({
                    'bold': True,
                    'font_color': 'white',
                    'bg_color': '#A52A2A',  # Brown
                    'valign': 'vcenter',
                    'border': 1
                })
        
                cell_format = workbook.add_format({
                    'border': 1
                })
        
                cell_format_blue_bg = workbook.add_format({
                    'bg_color': '#E6F0FF',  # Light blue
                    'border': 1
                })
        
                # TEST CASE LIST sheet
                worksheet1 = workbook.add_worksheet('TEST CASE LIST')
        
                # Set column widths
                worksheet1.set_column('A:A', 20)
                worksheet1.set_column('B:B', 60)
                worksheet1.set_column('C:E', 30)
        
                # Title
                worksheet1.merge_range('A1:E1', 'TEST CASE LIST', title_format)
        
                # Project info section
                worksheet1.write('A2', 'Project Name', header_format_brown)
                worksheet1.write('B2', '#REF!', cell_format)
        
                worksheet1.write('A3', 'Project Code', header_format_brown)
                worksheet1.write('B3', '#REF!', cell_format)
        
                worksheet1.write('A4', 'Test Environment Setup Description', header_format_brown)
                worksheet1.merge_range('A4:A7', 'Test Environment Setup Description', header_format_brown)
        
                # Test environment details
                env_text = "1. Server\n2. Database\n3. Web Browser\n4. Mobile"
                worksheet1.write('B4', env_text, cell_format_blue_bg)
                worksheet1.merge_range('B4:B7', env_text, cell_format_blue_bg)
        
                # Add empty row
                worksheet1.write('A8', '', cell_format)
                worksheet1.write('B8', '', cell_format)
        
                # Table headers
                worksheet1.write('A9', 'No', header_format_blue)
                worksheet1.write('B9', 'Function Name', header_format_blue)
                worksheet1.write('C9', 'Sheet Name', header_format_blue)
                worksheet1.write('D9', 'Description', header_format_blue)
                worksheet1.write('E9', 'Pre-Condition', header_format_blue)
        
                # Table data
                for i, func in enumerate(functions, 1):
                    row = i + 9
                    worksheet1.write(f'A{row}', i, cell_format)
                    worksheet1.write(f'B{row}', func, cell_format)
        
                    # Sheet name (make it look like a hyperlink)
                    sheet_name = func.replace(" ", "_")
                    hyperlink_format = workbook.add_format({
                        'font_color': 'blue',
                        'underline': 1,
                        'border': 1
                    })
                    worksheet1.write(f'C{row}', sheet_name, hyperlink_format)
        
                    # Empty Description and Pre-Condition cells
                    worksheet1.write(f'D{row}', '', cell_format)
                    worksheet1.write(f'E{row}', '', cell_format)
        
                # TEST STATISTICS sheet
                worksheet2 = workbook.add_worksheet('TEST STATISTICS')
        
                # Set column widths
                worksheet2.set_column('A:A', 15)
                worksheet2.set_column('B:B', 30)
                worksheet2.set_column('C:G', 15)
        
                # Title
                worksheet2.merge_range('A1:G1', 'TEST STATISTICS', title_format)
        
                # Project info section
                worksheet2.write('A2', 'Project Name', header_format_brown)
                worksheet2.write('B2', '#REF!', cell_format)
                worksheet2.write('C2', 'Creator', header_format_brown)
                worksheet2.write('E2', 'HaoNTT', cell_format)
        
                worksheet2.write('A3', 'Project Code', header_format_brown)
                worksheet2.write('B3', '#REF!', cell_format)
                worksheet2.write('C3', 'Reviewer/Approver', header_format_brown)
                worksheet2.write('E3', '', cell_format)
        
                worksheet2.write('A4', 'Document Code', header_format_brown)
                worksheet2.write('B4', '#REF!', cell_format)
                worksheet2.write('C4', 'Issue Date', header_format_brown)
                worksheet2.write('E4', today, cell_format)
        
                worksheet2.write('A5', 'Notes', header_format_brown)
                worksheet2.merge_range('B5:G5', '', cell_format)
        
                # Empty row
                worksheet2.write('A6', '', cell_format)
        
                # Table headers
                worksheet2.write('A7', 'No', header_format_blue)
                worksheet2.write('B7', 'Module code', header_format_blue)
                worksheet2.write('C7', 'Passed', header_format_blue)
                worksheet2.write('D7', 'Failed', header_format_blue)
                worksheet2.write('E7', 'Pending', header_format_blue)
                worksheet2.write('F7', 'N/A', header_format_blue)
                worksheet2.write('G7', 'Number of test cases', header_format_blue)
        
                # Table data (first 4 rows with #REF!)
                for i in range(1, 5):
                    row = i + 7
                    worksheet2.write(f'A{row}', i, cell_format)
                    worksheet2.write(f'B{row}', '#REF!', cell_format)
                    worksheet2.write(f'C{row}', '#REF!', cell_format)
                    worksheet2.write(f'D{row}', '#REF!', cell_format)
                    worksheet2.write(f'E{row}', '#REF!', cell_format)
                    worksheet2.write(f'F{row}', '#REF!', cell_format)
                    worksheet2.write(f'G{row}', '#REF!', cell_format)
        
                # Remaining rows with function names
                for i, func in enumerate(functions[4:], 5):
                    row = i + 7
                    worksheet2.write(f'A{row}', i, cell_format)
                    worksheet2.write(f'B{row}', func, cell_format)
                    worksheet2.write(f'C{row}', '#REF!', cell_format)
                    worksheet2.write(f'D{row}', '#REF!', cell_format)
                    worksheet2.write(f'E{row}', '#REF!', cell_format)
                    worksheet2.write(f'F{row}', '#REF!', cell_format)
                    worksheet2.write(f'G{row}', '#REF!', cell_format)
        
                # Sub total row
                sub_total_row = 16
                worksheet2.write(f'A{sub_total_row}', 'Sub total', header_format_blue)
                worksheet2.write(f'B{sub_total_row}', '', header_format_blue)
                worksheet2.write(f'C{sub_total_row}', '#REF!', header_format_blue)
                worksheet2.write(f'D{sub_total_row}', '#REF!', header_format_blue)
                worksheet2.write(f'E{sub_total_row}', '#REF!', header_format_blue)
                worksheet2.write(f'F{sub_total_row}', '#REF!', header_format_blue)
                worksheet2.write(f'G{sub_total_row}', '#REF!', header_format_blue)
        
                # Test coverage statistics
                worksheet2.write('A18', 'Test coverage', workbook.add_format({'bold': True, 'font_color': '#A52A2A'}))
                worksheet2.write('C18', '#REF!', workbook.add_format({'bold': True, 'font_color': 'blue'}))
                worksheet2.write('D18', '%', workbook.add_format({'bold': True, 'font_color': 'blue'}))
        
                worksheet2.write('A19', 'Test successful coverage', workbook.add_format({'bold': True, 'font_color': '#A52A2A'}))
                worksheet2.write('C19', '#REF!', workbook.add_format({'bold': True, 'font_color': 'blue'}))
                worksheet2.write('D19', '%', workbook.add_format({'bold': True, 'font_color': 'blue'}))
        
            print(f"✅ Excel test report generated: {excel_file}")
            return excel_file
        
        if __name__ == "__main__":
            excel_file = create_excel_report()
        EOF
        python generate_excel_report.py

    - name: Upload Excel test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-report
        path: ./coveragereport/Test_Report_*.xlsx
        retention-days: 30