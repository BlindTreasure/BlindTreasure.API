name: Deploy to VPS

on:
  repository_dispatch:
    types: [deploy-blindtreasure]  # Workflow này được kích hoạt khi workflow build gửi tín hiệu "deploy-blindtreasure"

jobs:
  deploy:
    runs-on: ubuntu-latest  # Máy chủ ảo của GitHub để thực hiện thao tác SSH

    steps:
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3  # Plugin để chạy lệnh SSH từ xa vào VPS
        with:
          host: ${{ secrets.VPS_HOST }}  # IP hoặc domain của VPS (khai báo trong repo secret)
          username: ${{ secrets.VPS_USER }}  # Tên user đăng nhập (thường là root)
          password: ${{ secrets.VPS_PASSWORD }}  # SSH password để đăng nhập

          script: |
              cd /root/projects/blindtreasure
              
              # Set longer timeouts
              export COMPOSE_HTTP_TIMEOUT=300
              export DOCKER_CLIENT_TIMEOUT=300
              
              echo "Pulling latest Docker image with retry logic..."
              RETRY_COUNT=0
              MAX_RETRIES=5
              
              while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                echo "Pull attempt $((RETRY_COUNT + 1))/$MAX_RETRIES..."
                
                if timeout 600 docker compose pull; then
                  echo "Pull successful!"
                  break
                else
                  RETRY_COUNT=$((RETRY_COUNT + 1))
                  if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                    echo "Pull failed, cleaning up and retrying in 60 seconds..."
                    docker system prune -f
                    sleep 60
                  else
                    echo "All retry attempts failed. Exiting..."
                    exit 1
                  fi
                fi
              done
              
              # Rest of your deployment script...
              echo "Backing up previous image tag..."
              docker image tag blindtreasureapi:latest blindtreasureapi:backup || true
              
              echo "Restarting container..."
              docker compose up -d
              
              echo "Removing dangling images to save space..."
              docker image prune -f
              
              echo "Checking health status..."
              curl -f http://localhost:5000/health || echo "WARNING: Healthcheck failed"  